Указатели на функции

как объявляются указатели на функции

тип (*имя)([сисок папраметров])
список параметров - которые будут переданы в функцию при ее вызове

имя_типа1 [name1],..., name_of_type#[name#]

example:
int (*PF)();

-- до записи диктофона --

void f();
int _tmain (...) {
   int (*pf)(); // shortcat for function
   f();
   pf = f;
(*pf)(); // or pf();
}
void f(){
   printf ("\n\t выполняется f()");
}

при объявлении указатели можно ...
int sum (int,int);
int mod (int,int);
int _tmain(...){
   int (*ps)(int,int) = &sum;
   int (*pm)(int,int) = &mod;
   int r = (ps(2,3 + pm(9,4))/3;
   printf("h\t r = %d", r);
   return 0;
}
int sum(int a,int b){
   return (a+b);
}
int mod(int a,int b){
   return(a%b);
}

как объявляются массивы указатели на функцию:

type (*name[size](patameters_list);

example
void f1();
void f2();
void f3();
int_tmain (...){
   const int # = 3;
   void (*pa[#])()={f1,f2,f3};
   for(int i = 0; i<#; i++)
      (*pa[i])();
   return 0;
}
void f1(){...}
void f2(){...}
void f3(){...}
 

int cmp (const void*, const void*) // cmp - compair
int _tmain (...){
   const size_t N=3;
   char *pw[N] = {"nother", "sister", "brother"};
   qsort((void*)pw, N, sizeof(char*),cmp); //qsort works with notypes parameters
   for (int i = 0, i<N,i++){
      printf("\n\t%S,pw[i]);
   }
   return 0;
}

int cmp(const void* l, const void *r){
   char ** L = (char**)l;
   char ** R = (char**)r;
   return strcmp ((const char*)*L, (const char*)*R);
}

Program structure 
f1(){...};f2(){...};...fN(){...}
main();
структуру можно представить так: 
//объявление
f1();
f2();
...
fN();
main();
//определения
f1(){...}...fN-1(){...}


.h .cpp - файли с этими расширениями составляют модуль
.h содержатся в начале файла (example: int cmp (const void*, const void*))
.cpp в конце

предыдущий пример, только чуть-чуть его по-другому оформим:

#include <stdlib.h>
#include "example.h" // если в кавычках, то мой файл( должен лежать в той же папке где лежит main функция. Может и в других но надо кое-что сделать)

int _tmain(...){
   int a(0), b(0);
   printf("\n\t Введите а,b")
   scanf("%d%d", &a,&b);
   printf("\t a + b = %d", sum(a,b));
   printf("\t a%b = %d", mod (a,b));
   return 0;
}

теперь example.h:
#ifndef EXAMPLE_H //# - директива препроцессора
#define EXAMPLE_H
   int sum(int, int);
   int mod(int,int);
#endif
//#pragma once - заменяет все три предыдущие

теперь example.cpp:
#include "stdAfx.h"
#include "example.h"
int sum(int a, int b){
   return (a+b);
}
int mod (int a, int b){
   return (a%b);
}

